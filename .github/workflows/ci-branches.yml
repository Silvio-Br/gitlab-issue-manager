name: 🔍 CI - Branches Development

on:
  push:
    branches:
      - '**'
      - '!main'

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'

jobs:
  # =============================================================================
  # Job 1: Installation des dépendances avec cache optimisé
  # =============================================================================
  install:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      pnpm-cache-key: ${{ steps.pnpm-cache-key.outputs.key }}
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Generate cache keys
        id: cache-key
        run: |
          echo "key=node-modules-${{ hashFiles('package-lock.json', 'package.json', 'pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: 📋 Generate pnpm cache key
        id: pnpm-cache-key
        run: |
          echo "key=pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🔄 Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ steps.pnpm-cache-key.outputs.key }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: 🔄 Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            node-modules-

      - name: 📥 Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          echo "📦 Installing dependencies with pnpm..."
          pnpm install --frozen-lockfile
          echo "✅ Dependencies installed successfully"

      - name: 📊 Dependencies info
        run: |
          echo "📋 Dependency summary:"
          echo "Node version: $(node --version)"
          echo "pnpm version: $(pnpm --version)"
          echo "Package count: $(ls node_modules | wc -l)"
          echo "Cache status: ${{ steps.cache-node-modules.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}"

  # =============================================================================
  # Job 2: Build de l'application
  # =============================================================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: install
    #strategy:
    #  matrix:
    #    build-env: [development, staging, production]
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔄 Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}

      - name: 🔄 Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: nextjs-${{ matrix.build-env }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            nextjs-${{ matrix.build-env }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}-

      - name: 🏗️ Build application (${{ matrix.build-env }})
        env:
          #NODE_ENV: ${{ matrix.build-env }}
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          echo "🏗️ Building application for ${{ matrix.build-env }}..."
          pnpm build
          echo "✅ Build completed successfully"

      - name: 📊 Build analysis
        run: |
          echo "📊 Build Analysis for ${{ matrix.build-env }}:"
          echo "Build size:"
          du -sh .next/ || echo "No .next directory found"
          echo "Static files:"
          find .next/static -name "*.js" -o -name "*.css" | wc -l || echo "No static files found"

  # =============================================================================
  # Job 3: Analyse de sécurité
  # =============================================================================
  security:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔄 Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.install.outputs.cache-key }}

      - name: 🔒 Run security audit
        run: |
          echo "🔒 Running security audit..."
          pnpm audit --audit-level moderate || echo "⚠️ Security vulnerabilities found"

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: 📊 Security summary
        run: |
          echo "📊 Security Analysis Summary:"
          echo "✅ Dependency audit completed"
          echo "✅ CodeQL analysis completed"

  # =============================================================================
  # Job 4: Résumé final et notifications
  # =============================================================================
  summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [install, build, security]
    if: always()
    steps:
      - name: 📋 Generate summary
        run: |
          echo "# 📋 CI Summary for Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Install | ${{ needs.install.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success notification
        if: needs.install.result == 'success' && needs.build.result == 'success'
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Ready for code review and merge"

      - name: ❌ Failure notification
        if: needs.install.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Some CI checks failed"
          echo "Please review the failed jobs and fix the issues"
          exit 1

  # =============================================================================
  # Job 5: Commentaire automatique sur PR (optionnel)
  # =============================================================================
  pr-comment:
    name: 💬 PR Comment
    runs-on: ubuntu-latest
    needs: [install, build, security]
    if: github.event_name == 'pull_request' && always()
    permissions:
      pull-requests: write
    steps:
      - name: 💬 Comment PR with results
        uses: actions/github-script@v6
        with:
          script: |
            const results = {
              install: '${{ needs.install.result }}',
              build: '${{ needs.build.result }}',
              security: '${{ needs.security.result }}'
            };
            
            const getEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const allPassed = Object.values(results).every(r => r === 'success');
            
            const comment = `## 🔍 CI Results for \`${{ github.ref_name }}\`
            
            | Check | Status |
            |-------|--------|
            | 📦 Install Dependencies | ${getEmoji(results.install)} ${results.install} |
            | 🏗️ Build Application | ${getEmoji(results.build)} ${results.build} |
            | 🔒 Security Analysis | ${getEmoji(results.security)} ${results.security} |
            
            ${allPassed ? 
              '🎉 **All checks passed!** This PR is ready for review.' : 
              '⚠️ **Some checks failed.** Please review and fix the issues before merging.'
            }
            
            ---
            *Automated comment by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
